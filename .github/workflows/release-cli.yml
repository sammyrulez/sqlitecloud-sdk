on:
  release:
    types:
      - published

name: Upload CLI Release Asset

jobs:
  release-c-cli:
    name: Upload Release C CLI
    if: github.event_name == 'release' && startsWith(github.event.release.name, 'cli-')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest
    runs-on: ${{ matrix.os }}
    env:
      OSNAME: ${{matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'macos' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set env var
        run: echo "TARFILE=sqlitecloud-c-${{ github.event.release.name }}-${{ env.OSNAME }}.tar.gz" >> $GITHUB_ENV
        
      - name: Build CLI
        run: |
          cd C
          make cli
          tar -czvf ${{ env.TARFILE }} sqlitecloud-cli

      - name: Get release
        id: release
        uses: bruceadams/get-release@v1.2.3
        if: runner.os != 'macOS'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        if: runner.os != 'macOS'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }} 
          asset_path: ./C/${{ env.TARFILE }}
          asset_name: ${{ env.TARFILE }}
          asset_content_type: application/zip
          
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: ${{ env.TARFILE }}
          path: ./C/${{ env.TARFILE }}
          if-no-files-found: error
          
  release-go-cli:
    name: Upload Release GO CLI
    if: github.event_name == 'release' && startsWith(github.event.release.name, 'cli-')
    strategy:
      matrix:
        include: 
          - goarch: amd64
            goos:   linux
            
          - goarch: amd64
            goos:   windows
          
          - goarch: arm64
            goos:   darwin
            
          - goarch: amd64
            goos:   darwin
            
    runs-on: ubuntu-latest
    env:
      OSNAME: ${{matrix.goos == 'darwin' && 'macos' || matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOOS:  ${{ matrix.goos }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set env var
        run: echo "TARFILE=sqlitecloud-go-${{ github.event.release.name }}-${{ env.OSNAME }}-${{ env.GOARCH }}.tar.gz" >> $GITHUB_ENV
      
      - name: Build CLI
        run: |
          cd GO/cli
          go build -o ../sqlc
          cd ..
          tar -czvf ${{ env.TARFILE }} sqlc

      - name: Get release
        id: release
        uses: bruceadams/get-release@v1.2.3
        if: matrix.goos != 'darwin'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        if: matrix.goos != 'darwin'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }} 
          asset_path: ./GO/${{ env.TARFILE }}
          asset_name: ${{ env.TARFILE }}
          asset_content_type: application/zip
          
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        if: matrix.goos == 'darwin'
        with:
          name: ${{ env.TARFILE }}
          path: ./GO/${{ env.TARFILE }}
          if-no-files-found: error
